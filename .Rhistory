results.folder = './results/'
work <- './work/'
# Import data
pheno <- readRDS(paste0(work,"pheno_sleep_mgs_shannon.rds"))
# Models
main.model <-   c("age", "Sex", "Alkohol","smokestatus","plate","BMI")
extended.model <- c(main.model,"Fibrer","Energi_kcal" ,"leisurePA",
"educat","placebirth","visit.month")
# Permanova Function
source('0_functions/permanova.fun.R')
# Importing BC matrix
BC = fread(paste0(work,'BCmatrix.tsv'))
BC_rownames <- BC$rownames
BC$rownames <- NULL
BC <-  as.matrix(BC)
colnames(BC) <- rownames(BC) <- BC_rownames
# By AHI severity groups ####
expo = "OSAcat"
pheno.ahi <- pheno[valid.ahi=="yes",]
# Main model
res1 <- Permanova.parallel.FUN(y = BC, exposure=expo,
data = pheno.ahi ,
model = main.model, nod=16)
fwrite(res1, file = paste0(results.folder,"permanova_main.model_ahi.tsv"))
# Extended model
res2 <- Permanova.parallel.FUN(y = BC, exposure=expo,
data = pheno.ahi,
model = extended.model, nod=16)
fwrite(res2, file = paste0(results.folder,"permanova_extended.model_ahi.tsv"))
library(tidyverse)
pheno %>% group_by(t90cat) %>% count()
pheno$t90
library(tidyverse)
library(Hmisc)
library(sjmisc)
library(data.table)
library(vegan)
# Set working directory to the same folder contaning the folder 00_data.preparation
# input = folder containing the data
input <- "./input/"
# work folder to save the final data
if(!dir.exists("work")){dir.create("work")}
work <- './work/'
# results folder
if(!dir.exists("results")){dir.create("results")}
results <- './results/'
# Import data
pheno <-readRDS(paste0(input,"pheno_sleep_mgs.rds"))
# Month of anthropometric collection date - variable to account for season
pheno[,visit.month:=format(as.POSIXct(pheno$AnthropometryCollectionDate),"%B")]
pheno[,visit.month:=factor(visit.month,c(month.name,"June.July"))]
# Merging June to July due to the low number of July participants
pheno[visit.month %in% c("June","July"),visit.month:="June.July"]
# remove extreme outlier
pheno[Energi_kcal==0, Energi_kcal:=NA]
# Calculating the log energy intake
pheno[,log.energi:= log(pheno$Energi_kcal)]
# Estimate sd and mean of energy intake
male.sd <-  sd(pheno[Sex=="male",log.energi],na.rm=T)
male.mean <- mean(pheno[Sex=="male",log.energi],na.rm=T)
female.sd <- sd(pheno[Sex=="female",log.energi],na.rm=T)
female.mean <- mean(pheno[Sex=="female",log.energi],na.rm=T)
# Using 3 sd to categorize over- and under-reporters
pheno[!is.na(Energi_kcal),energi.reporter:="ok"]
ll <- female.mean-(3*female.sd)
ul <- female.mean+(3*female.sd)
pheno[Sex=="female" & log.energi<ll, energi.reporter:="under"]
pheno[Sex=="female" & log.energi>ul, energi.reporter:="over"]
ll <- male.mean-(3*male.sd)
ul <- male.mean+(3*male.sd)
pheno[Sex=="male" & log.energi<ll, energi.reporter:="under"]
pheno[Sex=="male" & log.energi>ul, energi.reporter:="over"]
# Removing diet data from under- or over- reporter
pheno[,energi.original:=Energi_kcal]
pheno[energi.reporter!="ok",Energi_kcal:=NA]
pheno[energi.reporter!="ok",Fibrer:=NA]
#Those with valid AHI values have at least 4 hours of air flow and oxygen saturation monitoring
pheno[!is.na(ahi), valid.ahi := ifelse(BothFlO2utv4h==1, "yes", "no")]
#Those with valid T90 and ODI values have at least 4 hours of oxygen saturation monitoring
pheno[!is.na(t90) & !is.na(odi), valid.t90 := ifelse(o2utv4h==1, "yes", "no")]
# Exclude CPAP users
pheno[cqhe061 == 'CPAP', c("valid.ahi","valid.t90") := "no"] # Self-reported CPAP use for OSA (questionnaire)
pheno[cpap == 'yes', c("valid.ahi","valid.t90") := "no"] # Self-reported CPAP use during OSA assessment
# Assigning to NA the AHI, T90 and ODI values for CPAP users or  with monitoring < 4 hours
pheno[valid.ahi=='no', ahi:=NA]
pheno[valid.t90=='no', c("t90","odi"):=NA]
# Create groups of OSA severity based on AHI
pheno[valid.ahi=="yes", OSAcat:= rec(ahi, rec = "0:4.9=0; 5:14.9=1; 15:29.9=2 ; 30:max=3")]
pheno[,OSAcat:= factor(OSAcat, levels = c(0,1,2,3),
labels = c("No OSA", "Mild","Moderate", "Severe"))]
pheno[,OSAcat]
# Create groups of OSA severity based on T90
pheno[t90==0, t90cat := 'T90 = 0' ]
pheno[,t90cat]
pheno[,t90]
na.rm=T), includet = T)]
attach(pheno)
rm(ahi)
rm(t90)
rm(odi)
attach(pheno)
detach(pheno)
detach(pheno)
search
OSAcat
ahi
Sex
attach(pheno)
head(Sex)
quantile(t90,
probs = seq(0,1,by=1/3),
na.rm=T)
quantile(t90[t90!=0],
probs = seq(0,1,by=1/3),
na.rm=T)
cut(t90,breaks = quantile(t90[t90!=0],
probs = seq(0,1,by=1/3),
na.rm=T), include.lowest = T)
pheno[t90==0, t90cat := 'T90 = 0' ]
pheno[t90!=0, t90cat :=  cut(t90,breaks = quantile(t90,
probs = seq(0,1,by=1/3),
na.rm=T), include.lowest = T)]
level(t90cat)
levels(t90cat)
levels(pheno$t90cat)
unique(pheno$t90cat)
?cut
pheno[t90==0, t90cat := 'T90 = 0' ]
pheno[t90!=0, t90cat :=  cut(t90,breaks = quantile(t90,
probs = seq(0,1,by=1/3),
na.rm=T), include.lowest = T,
labels = c("t1","t2","t3"))]
pheno$t90cat
pheno[,.(t90,t90cat)]
class(pheno$t90cat)
# Packages
library(tidyverse)
rm(list=ls())
# Packages
library(tidyverse)
library(Hmisc)
library(sjmisc)
library(data.table)
library(vegan)
# input = folder containing the data
input <- "/proj/nobackup/sens2019512/users/baldanzi/sleepapnea_gut/data_processed/"
# work folder to save the final data
#if(!dir.exists("work")){dir.create("work")}
# work <- './work/'
work <-  '/proj/nobackup/sens2019512/users/baldanzi/sleepapnea_gut/work/'
# Import data
pheno <-readRDS(paste0(input,"pheno_sleep_mgs.rds"))
# Packages
library(tidyverse)
library(Hmisc)
library(sjmisc)
library(data.table)
library(vegan)
# Set working directory to the same folder contaning the folder 00_data.preparation
# input = folder containing the data
input <- "./input/"
# work folder to save the final data
if(!dir.exists("work")){dir.create("work")}
work <- './work/'
# results folder
if(!dir.exists("results")){dir.create("results")}
results <- './results/'
# Import data
pheno <-readRDS(paste0(input,"pheno_sleep_mgs.rds"))
# Month of anthropometric collection date - variable to account for season
pheno[,visit.month:=format(as.POSIXct(pheno$AnthropometryCollectionDate),"%B")]
pheno[,visit.month:=factor(visit.month,c(month.name,"June.July"))]
# Merging June to July due to the low number of July participants
pheno[visit.month %in% c("June","July"),visit.month:="June.July"]
# remove extreme outlier
pheno[Energi_kcal==0, Energi_kcal:=NA]
# Calculating the log energy intake
pheno[,log.energi:= log(pheno$Energi_kcal)]
# Estimate sd and mean of energy intake
male.sd <-  sd(pheno[Sex=="male",log.energi],na.rm=T)
male.mean <- mean(pheno[Sex=="male",log.energi],na.rm=T)
female.sd <- sd(pheno[Sex=="female",log.energi],na.rm=T)
female.mean <- mean(pheno[Sex=="female",log.energi],na.rm=T)
# Using 3 sd to categorize over- and under-reporters
pheno[!is.na(Energi_kcal),energi.reporter:="ok"]
ll <- female.mean-(3*female.sd)
ul <- female.mean+(3*female.sd)
pheno[Sex=="female" & log.energi<ll, energi.reporter:="under"]
pheno[Sex=="female" & log.energi>ul, energi.reporter:="over"]
ll <- male.mean-(3*male.sd)
ul <- male.mean+(3*male.sd)
pheno[Sex=="male" & log.energi<ll, energi.reporter:="under"]
pheno[Sex=="male" & log.energi>ul, energi.reporter:="over"]
# Removing diet data from under- or over- reporter
pheno[,energi.original:=Energi_kcal]
pheno[energi.reporter!="ok",Energi_kcal:=NA]
pheno[energi.reporter!="ok",Fibrer:=NA]
#Those with valid AHI values have at least 4 hours of air flow and oxygen saturation monitoring
pheno[!is.na(ahi), valid.ahi := ifelse(BothFlO2utv4h==1, "yes", "no")]
#Those with valid T90 and ODI values have at least 4 hours of oxygen saturation monitoring
pheno[!is.na(t90) & !is.na(odi), valid.t90 := ifelse(o2utv4h==1, "yes", "no")]
# Exclude CPAP users
pheno[cqhe061 == 'CPAP', c("valid.ahi","valid.t90") := "no"] # Self-reported CPAP use for OSA (questionnaire)
pheno[cpap == 'yes', c("valid.ahi","valid.t90") := "no"] # Self-reported CPAP use during OSA assessment
# Assigning to NA the AHI, T90 and ODI values for CPAP users or  with monitoring < 4 hours
pheno[valid.ahi=='no', ahi:=NA]
pheno[valid.t90=='no', c("t90","odi"):=NA]
# Create groups of OSA severity based on AHI
pheno[valid.ahi=="yes", OSAcat:= rec(ahi, rec = "0:4.9=0; 5:14.9=1; 15:29.9=2 ; 30:max=3")]
pheno[,OSAcat:= factor(OSAcat, levels = c(0,1,2,3),
labels = c("No OSA", "Mild","Moderate", "Severe"))]
# Create groups of OSA severity based on T90
pheno[t90==0, t90cat := 'T90 = 0' ]
pheno[t90!=0, t90cat :=  cut(t90,breaks = quantile(t90,
probs = seq(0,1,by=1/3),
na.rm=T), include.lowest = T,
labels = c("t1","t2","t3"))]
pheno[,t90cat:=factor(t90cat, levels = c("T90 = 0", "t1", "t2","t3" ),
labels = c("T90 = 0","t1","t2","t3"))]
# Create groups of OSA severity based on ODI
pheno[,odicat := cut(pheno$odi,breaks = quantile(odi, probs = seq(0,1,by=.25), na.rm=T),
include.lowest = T) , labels = c("q1", "q2", "q3", "q4")]
# Create groups of OSA severity based on ODI
pheno[,odicat := cut(pheno$odi,breaks = quantile(odi, probs = seq(0,1,by=.25), na.rm=T),
include.lowest = T , labels = c("q1", "q2", "q3", "q4"))]
rm(list=ls())
source("~/Documents/PhD_projects/1.Sleep/Scripts/git_hub/sleepapnea_gut/00_data.preparation/datapreparation.R", echo=TRUE)
source("~/Documents/PhD_projects/1.Sleep/Scripts/git_hub/sleepapnea_gut/1_cor_shannon/cor_osa_shannon.R", echo=TRUE)
mat <- matrix(1:15,ncol=3)
, nrow = rows, ncol = cols)
mat
a <- c(0,10,100)
a?mat
a+mat
t(a+t(mat))
dia <- c("2018-may-30","2014-jun-18","2015-Jan"
runif(1,.8,1.2)
runif(1,.8,1.2)
cont.variables <- c("ahi","odi","t90","age","Alkohol","BMI","SBP_Mean","DBP_Mean",
"Fibrer","Energi_kcal","Hba1cFormattedResult", "HBFormattedResult",
"WaistHip")
pheno.cont <- pheno[,cont.variables, with=F]
colnames(species.matrix) <- paste0("species____HG3A.",1:ncol(species.matrix))
setwd('/Users/gabba126/Documents/PhD_projects/1.Sleep/Scripts/git_hub/sleepapnea_gut')
source("~/Documents/PhD_projects/1.Sleep/Scripts/git_hub/sleepapnea_gut/00_data.preparation/datapreparation.R", echo=TRUE)
source("~/Documents/PhD_projects/1.Sleep/Scripts/git_hub/sleepapnea_gut/1_cor_shannon/cor_osa_shannon.R", echo=TRUE)
res.alpha <- fread('/Users/gabba126/Documents/PhD_projects/1.Sleep/Scripts/git_hub/sleepapnea_gut/results/cor_all.var_alpha.tsv')
res.alpha
source("~/Documents/PhD_projects/1.Sleep/Scripts/git_hub/sleepapnea_gut/2_beta.diversity/calculate_braycurtis.R", echo=TRUE)
source("~/Documents/PhD_projects/1.Sleep/Scripts/git_hub/sleepapnea_gut/2_beta.diversity/permanova_main.R", echo=TRUE)
df = data.table(v1 = rep(c("a","b"),5), v2 = c("x",rep(c("x","y","z"),3)))
df
apply(df,2,sample)
a = runif(10)
b = runif(10)*a
cor(a,b)
b = runif(10)*(a*.1)
cor(a,b)
b = runif(10)*(a*.05)
cor(a,b)
b = runif(1000)*(a*.05)
a = runif(1000)
b = runif(1000)*(a*.05)
cor(a,b)
b = runif(1000)*(a*.1)
cor(a,b)
mat = matrix(c(1,1,1,2,2,2,3,3,3),col=3)
mat = matrix(c(1,1,1,2,2,2,3,3,3),ncol=3)
mat
r = c(.8,2,3)
mat*r
mat*rep(r,3)
mat*rep(r,each=3)
t90 = runif(10)
t90
t90 = round(runif(10,0,10))
t90
t = round(runif(10,0,10))*01
t = round(runif(10,0,10))*0.1
t
t90
order(t90)
a = rnorm()
a = rnorm(100)
b = rnorm(100)
cor(a,b)
cor(a,b,method="spearman")
a = a[order(b)]
cor(a,b,method="spearman")
a[order(a)]
a[order(a)] <- a[order(b)]
cor(a,b)
cor(a,b,method="spearman"
)
a = order(a)
a
a = rnorm(a)
a <- a[order(a)]
aa
a
b = c(1,2,3,4,5)
a = c(2,1,3,5,4)
b = c(5,3,4,2,1)
a[order(b)]
m = match(order(b),order(a))
a[m]
a[order(a)]
a[order(a)][order(b)]
a[order(a)][b[order(b)]]
[b[order(b)]]
[b[order(b)]
b[order(b)]
[order(b)]
order(b)
b
rank(b)
a[rank(b)]
b = c(10,20,30,40,50)
b = c(10,20,30,50,40)
rank(b)
a[order(a)][rank(b)]
a = c(200,300,400,500,100)
a[order(a)][rank(b)]
b
a
a[order(a)][rank(b)]
b
cor(b, a[order(a)][rank(b)])
a = rnorm(20)
b = rnorm(20)
cor(b, a[order(a)][rank(b)])
b = rnorm(500)
a = rnorm(500)
cor(b, a[order(a)][rank(b)])
b[sample(1:500,10)] <- NA
cor(b, a[order(a)][rank(b)])
cor(b, a[order(a)][rank(b)], use="complete.obs")
a = a[order(a)][rank(b)]
cor(a,b,use="complete.obs")
?cor
?replicate
setwd('/Users/gabba126/Documents/PhD_projects/1.Sleep/Scripts/git_hub/sleepapnea_gut')
source('00_data.preparation/datapreparation.R')
source('1_cor_shannon/cor_osa_shannon.R')
rm(list=ls())
source('1_cor_shannon/cor_osa_shannon.R')
res.alpha
rm(list = ls())
source('00_data.preparation/datapreparation.R')
ls()
nrow(pheno)
rm(list=ls())
source('1_cor_shannon/cor_osa_shannon.R')
res.alpha
rm(list = ls())
source('3_correlation/root_script.R')
res.main.model
rm(list=ls()
)
source('4_imputation/pre.imputation.R')
rm(list=ls())
library(data.table)
library(vegan)
# Folders
work <- './work/'
results.folder <-  './results/'
# Import data
pheno <- readRDS(paste0(work,"pheno_sleep_mgs_shannon.rds"))
# Import findings from main model w/o BMI
mgs.fdr.main <- readRDS(paste0(results.folder, "mgs.fdr.mainmodel.rds"))
mgs.fdr.main <- unique(mgs.fdr.main$MGS)
# Create dummy variables for factor variables
#Covariates
main.model <-   c("age", "Sex", "Alkohol","smokestatus","plate","BMI")
extended.model <- c(main.model,"Fibrer","Energi_kcal" ,"leisurePA",
"educat","placebirth","month")
# Complete cases for the extended model on the analysis with T90/ODI
pheno <- pheno[valid.t90=="yes",]
setnames(pheno,"visit.month","month")
cc <- complete.cases(pheno[,extended.model,with=F])
pheno <- pheno[cc,]
# Rename levels for better handling at STATA
pheno[,leisurePA := factor(leisurePA, levels(leisurePA), labels = paste0("PA", 1:length(levels(leisurePA))))]
pheno[,educat := factor(educat, levels(educat), labels = c("edu1","edu2","edu3", "edu4"))]
pheno[month == "June.July", month := "Jun_Jul"]
# Dummy variables
temp.data <- pheno[,c("SCAPISid",extended.model),with=F]
setDF(temp.data)
rownames(temp.data) <- temp.data$SCAPISid
temp.data <- as.data.frame(model.matrix(~.,temp.data[extended.model]))
temp.data <- temp.data[,-which(names(temp.data)=="(Intercept)")]
names.dummy.var <- names(temp.data)
# Merge dummy variables
temp.data$SCAPISid <- rownames(temp.data)
vars <- c("SCAPISid", "ahi", "t90", "odi","valid.ahi","valid.t90","shannon","WaistHip",mgs.fdr.main)
pheno <- merge( pheno[, vars,with=F], temp.data, by="SCAPISid")
pheno$monthJune <- NULL # all equal 0
pheno$monthJuly <- NULL # all equal 0
# Makes species names shorter (some names were too long for STATA)
cutlast <- function(char,n){
l <- nchar(char)
a <- l-n+1
return(substr(char,a,l))
}
mgs.names.index <- grep("HG3A",names(pheno))
mgs.names.index
names(pheno)[mgs.names.index]
substr("abacate","ab")
grep("ab","abacate")
source('00_data.preparation/datapreparation.R')
source('3_correlation/root_script.R')
source('4_imputation/pre.imputation.R')
source('4_imputation/p.adjust.R')
res.impute
res.impute
source('5_hb_stratified/cor_stratified_hb.R')
ls()
res
rm(list=ls())
source('6_enrichment_GMM/enrich_GMM.R')
source('6_enrichment_GMM/enrich_GMM.R')
res
rm(list=ls()
)
source('6_enrichment_GMM/enrich_GMM.R')
res
list.modules
source('3_correlation/root_script.R')
source('00_data.preparation/')
source('00_data.preparation/datapreparation.R')
source('3_correlation/root_script.R')
warnings()
source('6_enrichment_GMM/enrich_GMM.R')
res
list.modules
MGS_HG3A.GMMs2MGS
rm(list=ls())
# Loading packages
library(data.table)
library(tidyr)
library(fgsea)
# Functions
source("0_functions/MGS.Enrich.function.R")
# Folders
input <- './input/'
results.folder <-  './results/'
work <- './work/'
# Import Spearman's correlation results from extended model
res <- fread(paste0(results.folder,"cor2_all.var_mgs.tsv"))
res
rm(list=ls())
# Loading packages
library(data.table)
library(tidyr)
library(fgsea)
# Functions
source("0_functions/MGS.Enrich.function.R")
# Folders
input <- './input/'
results.folder <-  './results/'
work <- './work/'
# Import Spearman's correlation results from extended model
res <- fread(paste0(results.folder,"cor2_all.var_mgs.tsv"))
res
res[,mgs:=cutlast(MGS,9)]
res.list <- list(AHI = res[exposure=="ahi",],
T90 = res[exposure=="t90",],
ODI = res[exposure=="odi",])
# List of modules ####
load(paste0(input,'MGS_HG3A.GMMs2MGS.RData')) # object = MGS_HG3A.GMMs2MGS
list.modules <-  MGS_HG3A.GMMs2MGS
for(m in names(list.modules)){
list.modules[[m]] <- list.modules[[m]][list.modules[[m]] %in% res[rho>0,mgs]]
}
lsit.modules
list.modules
# List of modules ####
load(paste0(input,'MGS_HG3A.GMMs2MGS.RData')) # object = MGS_HG3A.GMMs2MGS
list.modules <-  MGS_HG3A.GMMs2MGS
for(m in names(list.modules)){
list.modules[[m]] <- list.modules[[m]][list.modules[[m]] %in% res[rho>0,mgs]]
}
res.pos = list()[1:3]
for(i in 1:3){
res.pos[[i]] <-  MGS.Enrich.Analysis(res.list[[i]],
p.value.name="p.value",
MGS.var.name = "mgs",
direction = "positive",
enrich.var.list = list.modules)
}
res.pos <- do.call(rbind,res.pos)
list.modules <-  MGS_HG3A.GMMs2MGS
for(m in names(list.modules)){
list.modules[[m]] <- list.modules[[m]][list.modules[[m]] %in% res[rho<0,mgs]]
}
res.neg = list()[1:3]
for(i in 1:3){
res.neg[[i]] <-  MGS.Enrich.Analysis(res.list[[i]],
p.value.name="p.value",
MGS.var.name = "mgs",
enrich.var.list = list.modules,
direction = "negative")
}
res.neg <- do.call(rbind, res.neg)
# Save results
res <- rbind(res.pos,res.neg)
fwrite(res, file = paste0(results.folder,"ea_GMM.tsv"))
res
source('7_cor_health.outcomes/')
source('7_cor_health.outcomes/cor_mgs.gmm_bphb.R')
res
res$MGS_features
